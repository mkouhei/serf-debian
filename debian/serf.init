#!/bin/sh
### BEGIN INIT INFO
# Provides:          serf
# Required-Start:    $network $remote_fs $local_fs
# Required-Stop:     $network $remote_fs $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Service orchestration and management tool
# Description:       Serf is a service discovery and orchestration tool that
#                    is decentralized, highly available, and fault tolerant.
### END INIT INFO

# Author: Kouhei Maeda <mkouhei@palmtb.net>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC=serf
NAME=serf
DAEMON_NAME=serf
DAEMON=/usr/bin/serf
SERF_CONFIG_DIR=/etc/serf
DAEMON_ARGS="agent -config-dir=${SERF_CONFIG_DIR}"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
USER=serf
GROUP=serf

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh
VERBOSE="yes"

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

test -z $NOFILE_LIMIT || ulimit -n $NOFILE_LIMIT

check_for_upstart() {
	if init_is_upstart; then
		exit $1
	fi
}

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet -n $NAME --pidfile $PIDFILE -m -c $USER -u $USER -g $GROUP -b --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet -n $NAME --pidfile $PIDFILE -m -c $USER -u $USER -g $GROUP -b --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	# The above code will not work for interpreted scripts, use the next
	# six lines below instead (Ref: #643337, start-stop-daemon(8) )
	#start-stop-daemon --start --quiet --pidfile $PIDFILE --startas $DAEMON \
	#	--name $NAME --test > /dev/null \
	#	|| return 1
	#start-stop-daemon --start --quiet --pidfile $PIDFILE --startas $DAEMON \
	#	--name $NAME -- $DAEMON_ARGS \
	#	|| return 2

	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/10 --pidfile $PIDFILE --name $DAEMON_NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	#start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/10 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $DAEMON_NAME
	return 0
}

case "$1" in
	start)
		check_for_upstart 1
		[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
		do_start
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;
	stop)
		check_for_upstart 0
		[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
		do_stop
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;
	status)
		check_for_upstart 1
		status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
		;;
	reload|force-reload)
		#
		# If do_reload() is not implemented then leave this commented out
		# and leave 'force-reload' as an alias for 'restart'.
		#
		log_daemon_msg "Reloading $DESC" "$NAME"
		do_reload
		log_end_msg $?
		;;
	restart|force-reload)
		check_for_upstart 1
		#
		# If the "reload" option is implemented then remove the
		# 'force-reload' alias
		#
		log_daemon_msg "Restarting $DESC" "$NAME"
		do_stop
		case "$?" in
			0|1)
				do_start
				case "$?" in
					0) log_end_msg 0 ;;
					1) log_end_msg 1 ;; # Old process is still running
					*) log_end_msg 1 ;; # Failed to start
				esac
				;;
			*)
	  			# Failed to stop
				log_end_msg 1
				;;
		esac
		;;
	*)
		#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
		echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
		exit 3
		;;
esac

:
